"" Basic

set nocompatible
syntax on
filetype plugin indent on

"" General

set number	               " Show line numbers
set relativenumber             " Line numbers are relative to caret position
set linebreak	               " Break lines at word (requires Wrap lines)
set showbreak=+++	       " Wrap-broken line prefix
set textwidth=175	       " Line wrap (number of cols)
set showmatch	               " Highlight matching brace
" set spell	               " Enable spell-checking -- so distracting
set nospell
set virtualedit=all	       " Enable free-range cursor
set scrolloff=15               " Keep caret 15 lines away from viewport top and bottom border whenever posible
 
set hlsearch	               " Highlight all search results
set smartcase	               " Enable smart-case search
set ignorecase	               " Always case-insensitive
set incsearch	               " Searches for strings incrementally
 
set autoindent	               " Auto-indent new lines
set expandtab	               " Use spaces instead of tabs
set shiftwidth=2	       " Number of auto-indent spaces
set smartindent	               " Enable smart-indent
set smarttab	               " Enable smart-tabs
set softtabstop=2	       " Number of spaces per Tab
 
"" Advanced

set ruler	               " Show row and column ruler information
set cmdheight=1	               " Command line height
set backupcopy=yes             " Saves to backup then renames. Hot reloading parcel requirement
 
set undolevels=5000            " Number of undo levels
set backspace=indent,eol,start " Backspace behaviour
set path=.,,**
set wildmenu
"" Keyboard shortcuts and commands

nnoremap <tab> :noh<return><esc>

" Autoclose paren and braces

let s:AutoClosePairs = {'(':')','[':']','{':'}','"':'"',"'":"'"}
let s:AutoCloseExtraSpace = {'(':')','[':']','{':'}'}
let s:AutoCloseLineLength = -1 
let s:AutoCloseLastLineLength = -1
let s:AutoCloseLastLine = 0

function! s:GetCharUnder(off)
  if col('.')+a:off < 1 || col('.')-1+a:off >= col('$') 
    return '\0'
  endif
  return strpart(getline('.'), col('.')-1+a:off,1)
endfunction

function! s:GetPrevChar()
  return s:GetCharUnder(-1)
endfunction

function! s:GetNextChar()
  return s:GetCharUnder(1)
endfunction

function! s:Insert(char)
  exe "normal! i".a:char
  update
endfunction

function! s:AutoCloseBase()
  let l:next = s:GetNextChar()
  let l:current = s:GetCharUnder(0)
  let l:prev = s:GetPrevChar()

  if !has_key(s:AutoClosePairs, l:prev) 
    return
  endif

  call s:Insert(get(s:AutoClosePairs, l:prev))

endfunction

function! s:AutoCloseAddExtraSpace()

  let l:prev = s:GetPrevChar()
  
  if !(l:prev == ' ')
    return
  endif

  let l:preprev = s:GetCharUnder(-2)
  let l:current = s:GetCharUnder(0)

  if !has_key(s:AutoCloseExtraSpace, l:preprev) || !(get(s:AutoCloseExtraSpace, l:preprev) == l:current)
    return
  endif

  call s:Insert(' ')

endfunction

function! s:AutoCloseSkipInsertClosing()
  
  l:current = s:GetCharUnder(0)
  l:opening = ''
  for [ k, v ] in items(s:AutoClosePairs)
    if (v == l:current)
      l:opening = k
      
    endif
  endfor
  
endfunction

function! s:AutoClose()

  let s:AutoCloseLastLineLength = s:AutoCloseLineLength
  let s:AutoCloseLineLength = strlen(getline('.'))

  if (s:AutoCloseLineLength > s:AutoCloseLastLineLength && s:AutoCloseLastLine == line('.'))
    call s:AutoCloseBase()
    call s:AutoCloseAddExtraSpace()
  endif

  let s:AutoCloseLastLine = line('.')

endfunction

au TextChangedI * nested call s:AutoClose()

